package algorithm

import (
	"math"
)

/**

在找到第一个非空字符之前，需要移除掉字符串中的空格字符。如果第一个非空字符是正号或负号，选取该符号，并将其与后面尽可能多的连续的数字组合起来，这部分字符即为整数的值。如果第一个非空字符是数字，则直接将其与之后连续的数字字符组合起来，形成整数。

字符串可以在形成整数的字符后面包括多余的字符，这些字符可以被忽略，它们对于函数没有影响。

当字符串中的第一个非空字符序列不是个有效的整数；或字符串为空；或字符串仅包含空白字符时，则不进行转换。

若函数不能执行有效的转换，返回 0。

说明：

假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−231,  231 − 1]。如果数值超过可表示的范围，则返回  INT_MAX (231 − 1) 或 INT_MIN (−231) 。
------------------------------------------------------------------------------------------------------------------------------------
示例1
输入: "   -42"
输出: -42
解释: 第一个非空白字符为 '-', 它是一个负号。
     我们尽可能将负号与后面所有连续出现的数字组合起来，最后得到 -42 。
------------------------------------------------------------------------------------------------------------------------------------
示例 2:
输入: "42"
输出: 42
------------------------------------------------------------------------------------------------------------------------------------
示例 3:
输入: "4193 with words"
输出: 4193
解释: 转换截止于数字 '3' ，因为它的下一个字符不为数字。
------------------------------------------------------------------------------------------------------------------------------------

解析：
将字符串转换为byte数组，依次循环比较各字符与ascii码值，进行乘法累加，在乘法计算过程中需要判断是否溢出，溢出则根据正负判断返回最大值还是最小值
 */
func Atoi(str string) int32 {
	if len(str) == 0 {
		return 0
	}
	var ret int32
	isPositiveNumber := true
	for i := 0; i < len(str); i++ {
		a := str[i]
		if a == byte(' ') {
			continue
		}
		if ret == 0 {
			if a == byte('-') {
				isPositiveNumber = false
			} else if a == byte('+') {
				isPositiveNumber = true
			} else if a > byte('0') && a <= byte('9') {
				ret = int32(a - byte(0))
			} else {
				return 0
			}
		} else {
			if a > byte('0') && a <= byte('9') {
				newRet := ret*10 + int32(a-byte('0'))
				if (newRet-int32(a-byte('0')))/10 != ret {
					if isPositiveNumber {
						return math.MaxInt32
					} else {
						return math.MinInt32
					}
				}
				ret = newRet
			} else {
				break
			}
		}
	}
	if isPositiveNumber {
		return ret
	} else {
		return -ret
	}
}
